name: ci-cd

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 2) 공용 네트워크(카프카/앱/프로메테우스가 공유)
      - name: Create shared network
        run: docker network create msa-net || true

      # 1) 인프라
      - name: Up Kafka/ZooKeeper
        run: |
          docker compose -f ./kafka/docker-compose.yml up -d
          docker compose -f ./kafka/docker-compose.yml ps

      - name: Up Prometheus/Grafana
        run: |
          docker compose -f ./prometheus/docker-compose.yml up -d
          docker compose -f ./prometheus/docker-compose.yml ps

      # 2) 앱들 (각 폴더의 compose 사용)
      - name: Up Order API
        run: |
          docker compose -f ./msa-order/docker-compose.yml up -d --build
          docker compose -f ./msa-order/docker-compose.yml ps

      - name: Up Product API
        run: |
          docker compose -f ./msa-product/docker-compose.yml up -d --build
          docker compose -f ./msa-product/docker-compose.yml ps

      - name: Up Payment API
        run: |
          docker compose -f ./msa-payment/docker-compose.yml up -d --build
          docker compose -f ./msa-payment/docker-compose.yml ps

      - name: Wait for Web Server to Start
        run: |
          sleep 5

      - name: Wait for services to be healthy (Order/Product/Payment)
        run: |
          try_get() { url="$1"; name="$2"; for i in {1..60}; do
              code=$(curl -s -o /dev/null -w "%{http_code}" "$url" || true)
              if [ "$code" = "200" ]; then echo "OK: $name is healthy"; return 0; fi
              echo "Waiting $name ($i/60) - last code: $code"; sleep 5;
            done; echo "FAIL: $name not healthy"; exit 1; }

          try_get "http://localhost:8082/actuator/health" "msa-product"
          try_get "http://localhost:8083/actuator/health" "msa-order"
          try_get "http://localhost:8084/actuator/health" "msa-payment"

      # 5) Prometheus 체크
      - name: Check Prometheus (optional)
        run: |
          for i in {1..40}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:9090/-/ready" || true)
            [ "$code" = "200" ] && echo "OK: Prometheus ready" && break
            echo "Waiting Prometheus ($i/40) - last code: $code"; sleep 5
          done

          curl -fsS "http://localhost:9090/api/v1/targets?state=active" | grep -E 'order-api|payment-api|product-api' || true

      # 6) 실패 시 최근 로그 뿌리기
      - name: Show logs on failure
        if: ${{ failure() }}
        run: docker compose logs --no-color --since=10m || true

      # 7) 리소스 정리
      - name: Compose down (cleanup)
        run: |
          docker compose -f ./kafka/docker-compose.yml down
          docker compose -f ./prometheus/docker-compose.yml down
          docker compose -f ./msa-order/docker-compose.yml down
          docker compose -f ./msa-product/docker-compose.yml down
          docker compose -f ./msa-payment/docker-compose.yml down
